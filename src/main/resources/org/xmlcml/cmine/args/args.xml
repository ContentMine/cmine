<argList name="cmine" version="0.2.7">
  <p>20160122: tested globbing, snippets</p>
  <p>20160122: added search paths and globbing</p>
  <p>20160118: minor syncs with ami</p>
  <p>20160118: dictionary enhancement</p>
  <p>20160118: dictionary enhancement</p>
  <p>20160114: changed List ResultElement to ResultsElement</p>
  <p>20160112: refactoring to transfer some classes such as searchers to AMI</p>
  <p>20150807: added logfile</p>

	<arg name="input" 
		brief="-i"
		long="--input"
		args="[file(s)_and/or_url(s)]"
		countRange="{1,*}"
		parseMethod="parseInput"
		>
		<help>
		  <p class="brief">Input stream (Files, directories, URLs)</p> 
			<p>Norma tries to guess reasonable actions and
				also expand some simple wildcards. The argument can either be a single object, or a list. Within objects
				the content of curly brackets {...} is expanded as wildcards (cannot recurse). There can be multiple {...}
				within an object and all are expanded (but be sensible - this could generate the known universe and crash the
				system. If this is misused it will be withdrawn). Objects (URLs, files) can be mixed but it's probably a
				poor idea.
			</p>	
			<p>The logic is: 
				<ul>
				<li>(a) if an object starts with 'www' or 'http:' or 'https;' it's assumed to be a URL</li>
				<li>(b) if it is a directory, then the contents (filtered by extension) are added to the list as files</li>
				<li>(c) if it's a file it's added to the list</li>
				</ul>
				the wildcards in files and URLs are then expanded and the results added to the list
				</p>

				<p>			
				Current wildcards:
				  <ul>
	  <li><code>{n1:n2}</code> n1,n2 are integers: generate n1 ... n2 inclusive</li>
	  <li><code>{foo,bar,plugh}</code> list of strings</li>
				  </ul>
				</p>
				<p class="note">Undergoing continuing development. Often the filenames are redundant 
				(e.g. <code>fulltext.pdf</code> for <code>--transform pdf2txt</code>) and we are trying to make
				these implicit. The mechanisms for creating <em><code>ctree</code></em>s from isolated files will
				probably be altered. 
				</p>	  
		</help>
	</arg>	
	
	<arg name="ctree" 
		brief="-q"
		long="--ctree"
		args="director(ies)"
		class="org.xmlcml.cmine.files.CTree"
		countRange="{0,*}"
		parseMethod="parseCTree"
		>
		<help>
		<p class="note">NOTE WAS quickscrapeNorma and cmDir</p>
		<p class="brief">create or use $ctree directory.</p>
		<p>A ContentTree (ctree) may contain
			<ul>
			<li>results.json * // a listing of scraped files</li>
			
			<li>fulltext.xml ? // publishers XML</li>
			<li>fulltext.pdf ? // publishers PDF</li>
			<li>fulltext.html ? // raw HTML</li>
			<li>provisional.pdf ? // provisional PDF (often disappears)</li>
			
			<li>foo12345.docx ? // data files numbered by publisher/author</li>
			<li>bar54321.docx ?</li>
			<li>ah1234.cif ? // crystallographic data</li>
			<li>pqr987.cml ? // chemistry file</li>
			<li>mmm.csv ? // table</li>
			<li>pic5656.png ? // images</li>
			<li>pic5657.gif ? // image</li>
			<li>suppdata.pdf ? // supplemental data</li>
		</ul>			
			and more.</p>
			
			<p>only results.json is mandatory. However there will normally be at least one fulltext.* file and probably at 
			least one *.html file (as the landing page must be in HTML). Since quickscrape can extract data without 
			fulltext it might also be deployed against a site with data files.
			</p>
			
			<p>There may be some redundancy - *.xml may be transformable into *.html and *.pdf into *.html. The PDF may also 
			contain the same images as some exposed *.png.</p>
		</help>
	</arg>	
	
	
	<arg name="qsNorma" 
		brief="-q"
		long="--quickscrapeNorma"
		args="director(ies)"
		class="org.xmlcml.cmine.files.CTree"
		countRange="{0,*}"
		parseMethod="parseQSNorma"
		>
		<help>
		OBSOLETE // use --ctree instead
		</help>
	</arg>	
	
	<arg name="cmdir" 
		brief="-q"
		long="--cmdir"
		args="director(ies)"
		class="org.xmlcml.cmine.files.CTree"
		countRange="{0,*}"
		parseMethod="parseQSNorma"
		>
		<help>
		OBSOLETE // use --ctree instead
		</help>
	</arg>	
	
	<arg name="output"
		brief="-o"
		long="--output"
		args="file_or_directory"
		countRange="{1,1}"
		parseMethod="parseOutput"
		outputMethod="outputMethod"
		>
		<help>
			<p class="brief">Output to local filestore, normally within <em><code>ctree</code></em>.
			If there is only one input
			after wildcard expansion then a filename can be given. If the argument must be a writeable directory; Norma
			will do her best to create filenames derived from the input names. Directory structures will not be preserved.
			</p>
			<p class="note">At present users have to know the </p>
		</help>
	</arg>	
			
	<arg name="version"
		brief="-v"
		long="--version"
		args=" "
		countRange="{0,0}"
		parseMethod="parseVersion"
		>
		<help>
		<p>Prints version number.</p>
		<p class="note">Future versions will print the versions of ancestors.</p>
		</help>
	</arg>	
	
	<arg name="recursive"			
		brief="-r"
		long="--recursive"
		args=""
		class="java.lang.Boolean"
		countRange="{1,1}"
		parseMethod="parseRecursive"
		>
		
<!-- default ="false"  -->
		<help>
			If the input is a directory then by default only the first level is searched
			if the --recursive flag is set then all files in the directory tree may be input
			See also --extensions
			<p class="note">probably obsolete</p>
		</help>
	</arg>	
	
	<arg name="extensions"
		brief="-e"
		long="--extensions"
		args="ext1 [ext2...]"
		countRange="{1,*}"
		parseMethod="parseExtensions"
		>
		<help>
			<p>When a directory or directories are searched then all files are input by default.
			It is possible to limit the search by using only certain extensions.
			</p>
			<p class="note">The 'dot' is NOT included (so <code>xml png</code> not <code>.xml .png</code>)</p>
		</help>
	</arg>
		
	<arg name="summaryfile"
		long="--summaryfile"
		args="summaryfile"
		countRange="{1,1}"
		parseMethod="parseSummaryFile"
		>
		<help>
			<p>Directory to write summaries to.</p>
			<p class="note">Not fully developed. Some functions provided by --search</p>
		</help>
	</arg>
		
	<arg name="project"
		long="--project"
		args="projectFile"
		countRange="{1,1}"
		parseMethod="parseProject"
		>
		<help>
			<p>Toplevel directory with only CTree children</p>
			<p class="note">Not fully developed.</p>
			<p>A project has subdirectories which are assumed to be CTrees. These are all aggregated in the 
			initMethod into a List which is processed in the main program loop. 
			</p>
		</help>
	</arg>
		
	<arg name="help"
		brief="-h"
		long="--help"
		args=" "
		countRange="{0,0}"
		parseMethod="printHelp"
		>
		<help>
			<p>output help for all options, including superclass DefaultArgProcessor.</p>
		</help>
	</arg>	
	
	<arg name="makedocs"
	    long="--makedocs"
		args=" "
	    countRange="{0,0}"
	    runMethod="runMakeDocs"
	    >
	    <help>
	      <p>Create HTML version of all args.xml file for inclusion in documentation</p>
	      <p>Iterates over <code>src/main/resources</code> directory to find all <code>args.xml</code> files
	      and creates a sister <code>args.html</code> file.</p>
	    </help>
	    </arg>
	    
	    	
	<arg name="log"
	    long="--log"
		args=" logfile"
	    countRange="{0,1}"
	    parseMethod="parseLogfile"
	    >
	    <help>
	      <p>Write expected logging output to XML file</p>
	      <p>Defaults to [CTree]/log.xml</p>
	      <p>Still under development. This logfile is separate from the Log4J or other logger. It is the formal record of the analysis and can be used for metrics, archiving, 
	      re-use and guiding re-runs (and more). Each CTree will has a log.xml which records all operations and is extensible. 
	      Subdirectories of the Ctree
	      may also have <code>log.xml</code> files (referenced in the toplevel <code>log.xml</code>)</p>
	    </help>
    </arg>

	<arg name="unzip"
		long="--unzip"
		args="??"
		countRange="{1,1}"
		parseMethod="parseUnzip"
		>
		<help>
			<p class="brief">unzip files into proto-<em><code>ctree</code></em>s.
			</p>
			<p>At present only acts on *.zip or *.ZIP</p>
			<p>The extracted files may need renaming</p>
		</help>
	</arg>	
	    
	<arg name="include"
		long="--include"
		args="??"
		countRange="{1,1}"
		parseMethod="parseInclude"
		>
		<help>
			<p class="brief">only include files whose patterns match this regex</p>
		</help>
	</arg>	
	    
	<arg name="rename"
		long="--rename"
		args="??"
		countRange="{2,*}"
		parseMethod="parseRename"
		>
		<help>
			<p class="brief">renames files in ctree</p>
			<p>pairs of strings for renaming. <code>.*\\.XML fulltext\\.xml</code> will rename *.XML to fulltext.xml.</p>
		</help>
	</arg>	
	    
	<arg name="c.text"
	    long="--c.test"
		args=" "
	    countRange="{0,0}"
	    runMethod="runTest"
	    >
	    <help>
	      <p>Test method to support debugging of workflow</p>
	      <p>Does very little</p>
	    </help>
    </arg>
	    
	<arg name="dictionary"
	    long="--c.dictionary"
	    args="source [source]"
	    parseMethod="parseDictionary"
	    countRange="{1,*}"
	    >
	    <help>
	    <p>Dictionaries for lookup. sources follow EuclidSource and can be resources, files, or URLs.
	    in some cases they may also be symbolic.</p>
	    </help>
	</arg>
	    
	<arg name="search"
	    long="--search"
	    args="searchExpression"
	    parseMethod="parseSearch"
	    runMethod="runSearch"
	    countRange="{1,1}"
	    >
	    <help>
	    <p>Searches files with glob, and XML documents with Xpath.</p>
	    <p>The search expression is of the form:<code>
	    file(glob-expression)[.xpath(xpath-expression)[.file() ...]]</code>.
	    The result is either a list of files or an list of Xpath snippets, depending on the final
	    search component. The result is held in an XML file. We try to record both the files and the 
	    snippets and extract the hierarchy. Still being developed.
	    </p>
	    </help>
	</arg>
	
	    
</argList>
